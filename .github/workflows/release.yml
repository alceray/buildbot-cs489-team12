# Step 4:

# This step requires the Buildbot git repository to contain buildbot remote that points to https://github.com/buildbot/buildbot and can be pushed to.
# Additionally, the Buildbot docs repository (https://github.com/buildbot/bbdocs) must be checked out at ../bbdocs path.
# Pull the merge commit created on the master branch during the step 2. Then run:
# make release VERSION=x.y.z
# This will create the required tags, make documentation, copy it to bbdocs repo and push everything.

name: Perform Release

on:
  pull_request:
    types: [closed]
  workflow_dispatch:
    inputs:
      version:
        description: "Release version x.y.z"
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true && startsWith(github.event.pull_request.title, 'Release Notes for Version')) 
      || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3
        with:
          path: buildbot
      - uses: actions/checkout@v3
        with:
          repository: ${{ github.repository_owner }}/bbdocs
          path: bbdocs
          token: ${{ secrets.BBDOCS_PAT }}
      - uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - name: Setup version
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            VERSION="$(echo ${{ github.event.pull_request.title }} | cut -d' ' -f5)"
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILDBOT_VERSION=$VERSION" >> $GITHUB_ENV
      - name: Install dependencies
        working-directory: ./buildbot
        run: |
          pip install -U pip setuptools wheel
          pip install -r requirements-ci.txt -r requirements-cidocs.txt
          pip install towncrier virtualenv sphinx
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          workdir: ./buildbot
      - name: Perform release
        working-directory: ./buildbot
        run: |
          git config --global user.name github-actions
          git config --global user.email 41898282+github-actions[bot]@users.noreply.github.com
          git remote add buildbot https://github.com/${{ github.repository }}.git
          make release VERSION=$VERSION

  build:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -U pip setuptools wheel
          pip install -r requirements-ci.txt
          pip install -r requirements-cidocs.txt
          pip install pyinstaller
      - name: Setup version
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            VERSION="$(echo ${{ github.event.pull_request.title }} | cut -d' ' -f5)"
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILDBOT_VERSION=$VERSION" >> $GITHUB_ENV
      - name: Generate tarballs and run tests
        run: |
          source .venv/bin/activate
          export VERSION=$VERSION
          make docs-release
          make tarballs
          pip install -e www/react-base
          pyinstaller pyinstaller/buildbot-worker.spec
          SANDBOXED_WORKER_PATH=$(pwd)/dist/buildbot-worker
          trial --reporter=text --rterrors buildbot.test.integration.interop
      - name: Persist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Build Artifacts
          path: |
            dist
            master/docs/_build/html/

  publish:
    runs-on: ubuntu-latest
    needs: [release, build]
    steps:
      - name: Setup version
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            VERSION="$(echo ${{ github.event.pull_request.title }} | cut -d' ' -f5)"
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILDBOT_VERSION=$VERSION" >> $GITHUB_ENV
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: Build Artifacts
          path: .
      - name: Rename binaries
        run: |
          mv dist/buildbot-worker dist/buildbot-worker-linux-amd64-$VERSION.bin
      - name: Create Github release and upload binaries
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          files: |
            dist/*
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
